/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostEvent } from "./PostEvent";
import { PostEventCountArgs } from "./PostEventCountArgs";
import { PostEventFindManyArgs } from "./PostEventFindManyArgs";
import { PostEventFindUniqueArgs } from "./PostEventFindUniqueArgs";
import { DeletePostEventArgs } from "./DeletePostEventArgs";
import { PostEventService } from "../postEvent.service";
@graphql.Resolver(() => PostEvent)
export class PostEventResolverBase {
  constructor(protected readonly service: PostEventService) {}

  async _postEventsMeta(
    @graphql.Args() args: PostEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostEvent])
  async postEvents(
    @graphql.Args() args: PostEventFindManyArgs
  ): Promise<PostEvent[]> {
    return this.service.postEvents(args);
  }

  @graphql.Query(() => PostEvent, { nullable: true })
  async postEvent(
    @graphql.Args() args: PostEventFindUniqueArgs
  ): Promise<PostEvent | null> {
    const result = await this.service.postEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostEvent)
  async deletePostEvent(
    @graphql.Args() args: DeletePostEventArgs
  ): Promise<PostEvent | null> {
    try {
      return await this.service.deletePostEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
