/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostEventService } from "../postEvent.service";
import { PostEventCreateInput } from "./PostEventCreateInput";
import { PostEvent } from "./PostEvent";
import { PostEventFindManyArgs } from "./PostEventFindManyArgs";
import { PostEventWhereUniqueInput } from "./PostEventWhereUniqueInput";
import { PostEventUpdateInput } from "./PostEventUpdateInput";

export class PostEventControllerBase {
  constructor(protected readonly service: PostEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostEvent })
  async createPostEvent(
    @common.Body() data: PostEventCreateInput
  ): Promise<PostEvent> {
    return await this.service.createPostEvent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostEvent] })
  @ApiNestedQuery(PostEventFindManyArgs)
  async postEvents(@common.Req() request: Request): Promise<PostEvent[]> {
    const args = plainToClass(PostEventFindManyArgs, request.query);
    return this.service.postEvents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postEvent(
    @common.Param() params: PostEventWhereUniqueInput
  ): Promise<PostEvent | null> {
    const result = await this.service.postEvent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostEvent(
    @common.Param() params: PostEventWhereUniqueInput,
    @common.Body() data: PostEventUpdateInput
  ): Promise<PostEvent | null> {
    try {
      return await this.service.updatePostEvent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostEvent(
    @common.Param() params: PostEventWhereUniqueInput
  ): Promise<PostEvent | null> {
    try {
      return await this.service.deletePostEvent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
