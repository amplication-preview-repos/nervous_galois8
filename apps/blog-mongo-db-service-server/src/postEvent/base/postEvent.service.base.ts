/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PostEvent as PrismaPostEvent } from "@prisma/client";

export class PostEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PostEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.postEvent.count(args);
  }

  async postEvents(
    args: Prisma.PostEventFindManyArgs
  ): Promise<PrismaPostEvent[]> {
    return this.prisma.postEvent.findMany(args);
  }
  async postEvent(
    args: Prisma.PostEventFindUniqueArgs
  ): Promise<PrismaPostEvent | null> {
    return this.prisma.postEvent.findUnique(args);
  }
  async createPostEvent(
    args: Prisma.PostEventCreateArgs
  ): Promise<PrismaPostEvent> {
    return this.prisma.postEvent.create(args);
  }
  async updatePostEvent(
    args: Prisma.PostEventUpdateArgs
  ): Promise<PrismaPostEvent> {
    return this.prisma.postEvent.update(args);
  }
  async deletePostEvent(
    args: Prisma.PostEventDeleteArgs
  ): Promise<PrismaPostEvent> {
    return this.prisma.postEvent.delete(args);
  }
}
